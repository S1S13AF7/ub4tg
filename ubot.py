# -*- coding: utf-8 -*-
#https://docs-python.ru/packages/telegram-klient-telethon-python/	<-info
import asyncio

from datetime import datetime, timedelta
#from telethon.sync import TelegramClient
from telethon import TelegramClient, events, utils

import os
import re
import random
#import pytz
import time

import pymysql
import pymysql.cursors

import sqlite3

#–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
sessdb = 'tl-ub'
#Api ID –∏ Api Hash –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–∞ my.telegram.org

api_id = 00000000
api_hash = 'blahblahblahblahblahblahblahblah'
timezone = "Europe/Kiev"

db_pymysql = True#set True or False
db_sqlite3 = True#set True or False

async def main():
	async with TelegramClient(sessdb,api_id,api_hash) as client:
		client.parse_mode="HTML"
		print('User-Bot started')
		me= await client.get_me()
		my_id = int(me.id)
		my_fn = me.first_name
		print(my_id)
		
		if db_pymysql:
			con = pymysql.connect(host='localhost',
			user='root',
			password='V3rY$tR0NgPaS$Sw0Rd',
			db='db',
			charset='utf8mb4',
			cursorclass=pymysql.cursors.DictCursor)
			d = con.cursor()
			d.execute('''CREATE TABLE IF NOT EXISTS `tg_iris_zarazy` (
			`when_int` int(11) unsigned NOT NULL DEFAULT '0',
			`who_id` bigint(20) unsigned NOT NULL DEFAULT '0',
			`user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
			`u_link` varchar(500) NOT NULL DEFAULT '',
			`bio_str` varchar(11) NOT NULL DEFAULT '1',
			`bio_int` int(11) unsigned NOT NULL DEFAULT '1',
			`expr_int` int(11) unsigned NOT NULL DEFAULT '0',
			`expr_str` varchar(11) NOT NULL DEFAULT '0',
			UNIQUE KEY `UNIQUE` (`who_id`,`user_id`)
			);''');
			con.commit()
			d.execute('''CREATE TABLE IF NOT EXISTS `tg_bio_attack` (
			`from_infect` int(11) unsigned NOT NULL DEFAULT '0',
			`who_id` bigint(20) unsigned NOT NULL DEFAULT '0',
			`user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
			`profit` int(11) unsigned NOT NULL DEFAULT '1',
			`until_infect` int(11) unsigned NOT NULL DEFAULT '0',
			`until_str` varchar(11) NOT NULL DEFAULT '0',
			UNIQUE KEY `UNIQUE` (`who_id`,`user_id`)
			);''');
			con.commit()
			d.execute('''CREATE TABLE IF NOT EXISTS `tg_bio_users` (
			`user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
			`when_int` int(11) unsigned NOT NULL DEFAULT '0',
			`profit` int(11) unsigned NOT NULL DEFAULT '1',
			UNIQUE KEY `user_id` (`user_id`)
			);''');
			con.commit()
			d.execute('''CREATE TABLE IF NOT EXISTS `tg_users_url` (
			`user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
			`when_int` int(11) unsigned NOT NULL DEFAULT '0',
			`u_link` varchar(64) NOT NULL DEFAULT '',
			`f_name` text NOT NULL,
			PRIMARY KEY (`user_id`),
			UNIQUE KEY (`u_link`)
			);''');
			con.commit()
		
		if db_sqlite3:
			conn = sqlite3.connect(f"{my_id}.sqlite")#–ø–æ–∫–ª–∞—Å—Ç–∏ –±–∞–∑—É —Ä—è–¥–æ–º?
			#conn = sqlite3.connect(f"D:\\Misc\\projects\\Python\\ub4tg_db\\{my_id}.sqlite")#–ê–±–æ –ø–æ–≤–Ω—ñ—Å—Ç—é
			c = conn.cursor()
			c.execute('''CREATE TABLE IF NOT EXISTS zarazy	(
			user_id	INTEGER NOT NULL DEFAULT 0 UNIQUE,
			when_int	INTEGER NOT NULL DEFAULT 0,
			bio_str	VARCHAR NOT NULL DEFAULT 1,
			bio_int	INTEGER NOT NULL DEFAULT 1,
			expr_int	INTEGER NOT NULL DEFAULT 0,
			expr_str	VARCHAR NOT NULL DEFAULT 0
			)''');
			conn.commit()
			c.execute('''CREATE TABLE IF NOT EXISTS avocado	(
			user_id	INTEGER NOT NULL DEFAULT 0 UNIQUE,
			when_int	INTEGER NOT NULL DEFAULT 0,
			bio_str	VARCHAR NOT NULL DEFAULT 1,
			bio_int	INTEGER NOT NULL DEFAULT 1,
			expr_int	INTEGER NOT NULL DEFAULT 0,
			expr_str	VARCHAR NOT NULL DEFAULT 0
			)''');
			conn.commit()
		####################################################################
		async def get_id(url):
			user_id = 0
			if "tg://openmessage?user_id=" in url:
				user_id = int(re.findall(r'user_id=([0-9]+)',url)[0])
				print(user_id)
				return user_id
			if "t.me/" in url:
				if db_pymysql:
					try:
						d.execute("SELECT * FROM `tg_users_url` WHERE `u_link` = '%s' ORDER BY `when_int` DESC" % str(url)); 
						user = d.fetchone();
						if user is None:
							#print(f'–Ω–µ –∑–Ω–∞–π—à–ª–∏ {url} —É `tg_users_url`')
							pass
						else:
							user_id = int(user['user_id'])
							print(f'{url} in db: @{user_id}')
					except Exception as Err:
							print(f'E:{Err}/S {url} —É `tg_users_url`')
					if user_id==0:
						try:
							d.execute("SELECT * FROM `tg_iris_zarazy` WHERE `u_link` = '%s' ORDER BY `when_int` DESC" % str(url));
							user = d.fetchone();
							if user is None:
								#print(f'–Ω–µ –∑–Ω–∞–π—à–ª–∏ {url} —É `tg_iris_zarazy`')
								pass
							else:
								user_id = int(user['user_id'])
								print(f'{url} in db: @{user_id}')
						except Exception as Err:
							print(f'E:{Err}/S {url} —É `tg_iris_zarazy`')
				if user_id==0:
					try:
						user_entity = await client.get_entity(url)
						if user_entity.id:
							user_id = int(user_entity.id)
							user_fn = user_entity.first_name or ''
							print(f'ok:{url}/@{user_id}')
							if db_pymysql:
								try:
									d.execute("INSERT INTO `tg_users_url` (`when_int`,`user_id`,`u_link`,`f_name`) VALUES (%s,%s,%s,%s) ON DUPLICATE KEY UPDATE user_id = VALUES (user_id),u_link = VALUES (u_link),f_name = VALUES (f_name),when_int = VALUES (when_int);", (int(time.time()),int(user_id),str(url),str(user_fn))); con.commit()
								except Exception as Err:
									print(f'E:{Err}')
					except Exception as Err:
						print(f'E:{Err}')
						#pass
			return user_id
		
		async def message_q( # —Å–ø–∏–∑–∂–µ–Ω–æ
				text: str,
				user_id: int,
				mark_read: bool = False,
				delete: bool = False,
		):
				"""–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç"""
				async with client.conversation(user_id, exclusive=False) as conv:
						msg = await conv.send_message(text)
						response = await conv.get_response()
						if mark_read:
								await conv.mark_read()
						return response
		
		####################################################################
		
		
		@client.on(events.NewMessage(outgoing=True,pattern='\.–ø'))
		async def cmd_–ø(event):
			mess = event.message
			text = mess.raw_text
			if text =='.–ø' or text=='.–ø–∞—Ç–æ–≥–µ–Ω':
				#FIX! –ê —Ç–æ —Å–ø—Ä–∞—Ü—å–æ–≤—É–≤–∞–ª–æ –Ω–∞ .–ø(–µ—Ä–µ–¥–∞—Ç—å,–æ–≤—ã—Å–∏—Ç—å,–æ–≥–ª–∞–¥–∏—Ç—å,,,,,,,%)
				l_r = await message_q( # –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
				f"/–ª–∞–± –≤ –ª—Å",
				5443619563,
				mark_read=True,
				delete=False,
				)
				h=utils.sanitize_parse_mode('html').unparse(l_r.message,l_r.entities)
				lab_lines = h.splitlines() # —Ç–µ–∫—Å—Ç —Å –ª–∞–±–æ–π, —Ä–∞–∑–±–∏—Ç—ã–π –Ω–∞ —Å—Ç—Ä–æ–∫–∏
				new = ""
				if "üî¨ –î–æ—Å—å–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏" not in lab_lines[0]:
					pass
				else:
					
					for i in lab_lines: # —Ü–∏–∫–ª for –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º –≤ —Ç–µ–∫—Å—Ç–µ –ª–∞–±—ã
						if "üß™ –ì–æ—Ç–æ–≤—ã—Ö –ø–∞—Ç–æ–≥–µ–Ω–æ–≤:" in i:
							s = i.replace("üß™ –ì–æ—Ç–æ–≤—ã—Ö –ø–∞—Ç–æ–≥–µ–Ω–æ–≤:", "üß™ ")
							s = s.replace("–∏–∑", "—ñ–∑")
							new+=f'{s}\n' # add \n

						if "‚ò£Ô∏è –ë–∏–æ-–æ–ø—ã—Ç:" in i:
							s = i.replace("‚ò£Ô∏è –ë–∏–æ-–æ–ø—ã—Ç:", "‚ò£Ô∏è ")
							new+=f'{s}\n' # add \n
						if "üß¨ –ë–∏–æ-—Ä–µ—Å—É—Ä—Å:" in i:
							s = i.replace("üß¨ –ë–∏–æ-—Ä–µ—Å—É—Ä—Å:", "üß¨ ")
							new+=f'{s}\n' # add \n

						if "‚ùóÔ∏è –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≥–æ—Ä—è—á–∫–∏ –µ—â—ë" in i:
							s = i.replace("‚ùóÔ∏è –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≥–æ—Ä—è—á–∫–∏ –µ—â—ë", "ü§¨ ")
							new+=f'{s}\n' # add \n
						if "–≤—ã–∑–≤–∞–Ω–Ω–æ–π –±–æ–ª–µ–∑–Ω—å—é" in i:
							#	‚ùóÔ∏è –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≥–æ—Ä—è—á–∫–∏, –≤—ã–∑–≤–∞–Ω–Ω–æ–π –±–æ–ª–µ–∑–Ω—å—é ¬´%s¬ª, –µ—â—ë 
							#s = i.replace("‚ùóÔ∏è –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≥–æ—Ä—è—á–∫–∏, –≤—ã–∑–≤–∞–Ω–Ω–æ–π –±–æ–ª–µ–∑–Ω—å—é ", "ü§¨ ")
							b = re.findall(r'–≤—ã–∑–≤–∞–Ω–Ω–æ–π –±–æ–ª–µ–∑–Ω—å—é ¬´(.+)¬ª',i)[0]#–Ω–∞–∑–≤–∞ —Ç–æ—ó —Ö—î—Ä–Ω—ñ —è–∫–æ—é –∑–∞—Ä–∞–∑–∏–ª–∏
							s = i.replace(f"‚ùóÔ∏è –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≥–æ—Ä—è—á–∫–∏, –±–æ–ª–µ–∑–Ω—å—é ¬´{b}¬ª, –µ—â—ë ", 
							f"ü§¨ <code>{b}</code>\n‚è≥ ")#–∫–æ–ø—ñ–ø–∞–±–µ–ª—å–Ω–æ –¥–ª—è –ø–æ—à—É–∫—É
					await event.edit(new) #—Ä–µ–¥
		
		
		####################################################################
		
		
		@client.on(events.NewMessage(pattern='.*–ø–æ–¥–≤–µ—Ä–≥(–ª–∞)? –∑–∞—Ä–∞–∂–µ–Ω–∏—é.*'))
		async def podverg(event):
			#—Ö—Ç–æ —Ç–∞–º –∫–æ–≥–æ –ø–æ–¥–≤–µ—Ä–≥(–ª–∞)
			m = event.message
			t = m.raw_text
			irises = [707693258,5137994780,5226378684,5443619563,5434504334]
			if m.sender_id not in irises:
				#print(f"@{m.sender_id} –Ω–µ Iris!?");#–ê–±–æ —Ü–µ –∞–±–æ pass. —â–æ –∫—Ä–∞—â–µ?
				pass
			elif len(m.entities) > 1:
				h= utils.sanitize_parse_mode('html').unparse(t,m.entities)#HTML
				r= re.findall(r'ü¶† <a href="(tg://openmessage\?user_id=\d+|https://t\.me/\w+)">.*</a> –ø–æ–¥–≤–µ—Ä–≥.+<a href="(tg://openmessage\?user_id=\d+|https://t\.me/\w+)">',h)
				if r:
					u1url=r[0][0]
					u2url=r[0][1]
					u1id = await get_id(u1url)
					u2id = await get_id(u2url)
					#print(f'{u1url} [@{u1id}] –ø–æ–¥–≤–µ—Ä–≥(–ª–∞) {u2url} [@{u2id}]')#–ø–æ–∫–∞–∑–∞—Ç—å
					when=int(datetime.timestamp(m.date))
					days=int(re.sub(r' ','',re.findall(r' –Ω–∞ ([0-9\ ]+) –¥.*', t)[0]))
					experience=re.findall(r"\+([0-9\.\,k]+) –±–∏–æ-–æ–ø—ã—Ç–∞", t)[0]
					if ',' in experience:
						experience=re.sub(r',', r'.',experience)
					if 'k' in experience:
						exp_int=int(float(re.sub('k', '',experience)) * 1000)
					else:
						exp_int=int(experience)
					if '–û–±—ä–µ–∫—Ç –µ—â—ë –Ω–µ –ø–æ–¥–≤–µ—Ä–≥–∞–ª—Å—è –∑–∞—Ä–∞–∂–µ–Ω–∏—é –≤–∞—à–∏–º –ø–∞—Ç–æ–≥–µ–Ω–æ–º' in event.raw_text:
						exp_int=int(re.sub(r' ','',re.findall(r'–ø–æ ([0-9\ ]+) –µ–¥.*',event.raw_text)[0]))
					a=datetime.utcfromtimestamp(when)+timedelta(days=int(days), hours=3)
					do_int=datetime.timestamp(a)
					do_txt=str(a.strftime("%d.%m.%y"))
					if u1id > 0 and u2id > 0 and u1id != u2id:
						if db_sqlite3 and u1id==my_id:
							try:
								c.execute("INSERT INTO zarazy(user_id,when_int,bio_str,bio_int,expr_int,expr_str) VALUES (?, ?, ?, ?, ?, ?)", (int(u2id),int(when),str(experience),int(exp_int),int(datetime.timestamp(a)),str(a.strftime("%d.%m.%y")))); conn.commit()
							except:
								try:
									c.execute("UPDATE zarazy SET when_int = :wh, bio_str = :xp, bio_int = :xpi, expr_int = :end, expr_str = :do WHERE user_id = :z AND when_int <= :wh;", {"wh":int(when),"xp":str(experience),"xpi":int(exp_int),"end":int(datetime.timestamp(a)),"do":str(a.strftime("%d.%m.%y")),"z":int(u2id)}); conn.commit()
								except Exception as Err:
									print(f'err: {Err} zarazy')
						if db_pymysql:
							try:
								d.execute("INSERT INTO `tg_iris_zarazy` (`who_id`, `user_id`, `when_int`, `bio_str`, `bio_int`, `expr_int`, `expr_str`, `u_link`) VALUES (%s,%s,%s,%s,%s,%s,%s,%s) ON DUPLICATE KEY UPDATE when_int=VALUES (when_int),bio_str=VALUES (bio_str),bio_int=VALUES (bio_int),expr_int=VALUES (expr_int),expr_str=VALUES (expr_str),u_link = VALUES (u_link);", (int(u1id),int(u2id),int(when),str(experience), int(exp_int), int(datetime.timestamp(a)),str(a.strftime("%d.%m.%y")),str(u2url))); con.commit()
								print(f"\nINSERT INTO .... ON DUPLICATE KEY UPDATE # [@{u1id}] => [@{u2id}]\n")
							except Exception as Err:
								print(f'err: {Err} /localhost')
								#pass
						print(f'''{u1url} [@{u1id}] –ø–æ–¥–≤–µ—Ä–≥(–ª–∞) {u2url} [@{u2id}] +{experience}''')#–ø–æ–∫–∞–∑–∞—Ç—å
		
		
		####################################################################
		
		
		@client.on(events.NewMessage(pattern='.*–π–æ–±–Ω—É–≤.*'))
		async def podverg_a(event):
			#—Ö—Ç–æ —Ç–∞–º –∫–æ–≥–æ –π–æ–±–Ω—É–≤(–ª–∞)
			m = event.message
			t = m.raw_text
			if m.sender_id !=6333102398:
				pass
			elif len(m.entities) > 1:
				h= utils.sanitize_parse_mode('html').unparse(t,m.entities)#HTML
				r= re.findall(r'<a href="(tg://openmessage\?user_id=\d+|https://t\.me/\w+)">.*</a> –π–æ–±–Ω—É–≤.+<a href="(tg://openmessage\?user_id=\d+|https://t\.me/\w+)">',h)
				if r:
					u1url=r[0][0]
					u2url=r[0][1]
					u1id = await get_id(u1url)
					u2id = await get_id(u2url)
					#print(f'{u1url} [@{u1id}] –ø–æ–¥–≤–µ—Ä–≥(–ª–∞) {u2url} [@{u2id}]')#–ø–æ–∫–∞–∑–∞—Ç—å
					when=int(datetime.timestamp(m.date))
					days=int(re.sub(r' ','',re.findall(r' –Ω–∞ ([0-9\ ]+) –¥.*', t)[0]))
					experience=re.findall(r"([0-9\.\,k]+) –±—ñ–æ-—Ä–µ—Å—É—Ä—Å–∞", t)[0]
					if ',' in experience:
						experience=re.sub(r',', r'.',experience)
					if 'k' in experience:
						exp_int=int(float(re.sub('k', '',experience)) * 1000)
					else:
						exp_int=int(experience)
					a=datetime.utcfromtimestamp(when)+timedelta(days=int(days), hours=3)
					do_int=datetime.timestamp(a)
					do_txt=str(a.strftime("%d.%m.%y"))
					if u1id > 0 and u2id > 0:
						if db_sqlite3 and u1id==my_id:
							try:
								c.execute("INSERT INTO avocado(user_id,when_int,bio_str,bio_int,expr_int,expr_str) VALUES (?, ?, ?, ?, ?, ?)", (int(u2id),int(when),str(experience),int(exp_int),int(datetime.timestamp(a)),str(a.strftime("%d.%m.%y")))); conn.commit()
							except:
								try:
									c.execute("UPDATE avocado SET when_int = :wh, bio_str = :xp, bio_int = :xpi, expr_int = :end, expr_str = :do WHERE user_id = :z AND when_int <= :wh;", {"wh":int(when),"xp":str(experience),"xpi":int(exp_int),"end":int(datetime.timestamp(a)),"do":str(a.strftime("%d.%m.%y")),"z":int(u2id)}); conn.commit()
								except Exception as Err:
									print(f'err: {Err} avocado')
						if db_pymysql:
							try:
								#from_infect 	who_id 	user_id 	profit 	until_infect 	until_str
								d.execute("INSERT INTO `tg_bio_attack` (`who_id`, `user_id`, `from_infect`, `profit`, `until_infect`, `until_str`) VALUES (%s,%s,%s,%s,%s,%s) ON DUPLICATE KEY UPDATE from_infect=VALUES (from_infect),profit=VALUES (profit),until_infect=VALUES (until_infect),until_str = VALUES (until_str);", (int(u1id),int(u2id),int(when),str(experience), int(datetime.timestamp(a)),str(a.strftime("%d.%m.%y")))); con.commit()
								print(f"\nINSERT INTO .... ON DUPLICATE KEY UPDATE # [@{u1id}] => [@{u2id}]\n")
							except Exception as Err:
								print(f'err: {Err} (tg_bio_attack)')
								#pass
							try:
								#user_id 	when 	profit
								d.execute("INSERT INTO `tg_bio_users` (`user_id`, `when_int`, `profit`) VALUES (%s,%s,%s) ON DUPLICATE KEY UPDATE when_int=VALUES (when_int),profit=VALUES (profit);", (int(u2id),int(when),str(experience))); con.commit()
							except Exception as Err:
								print(f'err: {Err} (tg_bio_users)')
								#pass
						print(f'''{u1url} [@{u1id}] –ø–æ–¥–≤–µ—Ä–≥(–ª–∞) {u2url} [@{u2id}] +{experience}''')#–ø–æ–∫–∞–∑–∞—Ç—å
		
		
		####################################################################
		
		
		@client.on(events.NewMessage(outgoing=True, pattern='.biofuck'))
		async def cmd_bf(event):			#–∫—Ä—á –∞–∫—É—Ä–∞—Ç–Ω–æ –∑ —Ü–∏–º,–≤–¥—Ä—É–≥ —à–æ —è –Ω—ñ—á–æ
			m = event.message
			when=int(datetime.timestamp(m.date))
			msg='ü§∑' # —è–∫—â–æ –Ω–µ–º–∞ –∫–æ–≥–æ —Ç–æ –∂—Ä–∏ —Ä–∞–Ω–¥–æ–º.
			c.execute(f"SELECT * FROM `avocado` WHERE expr_int <= {when} ORDER BY expr_int,when_int ASC"); 
			e_info=c.fetchall()
			count = len(e_info)
			if count < 2:
				nema=f'ü§∑ —Ä–∞–Ω–¥–æ–º —Ö–∞–≤–∞–π.'
				await event.edit(nema) #—Ä–µ–¥
				print(nema)
			else:
				pong='‚úÖ –ø–æ–≥–Ω–∞–ª–∏...'
				await event.edit(pong) #—Ä–µ–¥
				print(f'—î {count} –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏—Ö –ø–∞—Ü—ñ—î–Ω—Ç—ñ–≤. —Å–ø—Ä–æ–±—É—î–º —ó—Ö —Å–æ–∂—Ä–∞—Ç—å')
				for row in e_info:
					rs = float(random.uniform(6,96)) #—Å–∫—ñ–ª—å–∫–∏ —Å–ø–∏–º: random
					eb = f'–ë–∏–æ–µ–± {row[0]}' #–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
					m=await event.reply(eb)
					await asyncio.sleep(3.3)
					await client.delete_messages(event.chat_id,m.id)
					await asyncio.sleep(rs)
				
		
		####################################################################
		
		
		@client.on(events.NewMessage(outgoing=True, pattern='.l2f'))
		async def cmd_l2f(event):			#Local->file/{id}.sqlite
			msg='–¥–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –æ–±–∏–¥–≤—ñ –±–∞–∑–∏ True'
			if db_pymysql:
				try:
					d.execute("SELECT * FROM `tg_iris_zarazy` WHERE who_id = %d ORDER BY when_int;" % int(my_id));
					bz_info = d.fetchall()#–ø–æ–ª—É—á–∏—Ç—å
					count=len(bz_info)
					if count==0:
						msg='ü§∑ —ñ–Ω—Ñ–∞ –Ω–µ–º–∞.'
						print(msg)
					else:
						saved=0
						for row in bz_info:
							print(row)
							id_user=int(row["user_id"])
							bio_int=int(row["bio_int"])
							bio_str=str(row["bio_str"])
							when_int=int(row["when_int"])
							expr_int=int(row["expr_int"])
							expr_str=str(re.sub(r'.20', r'.',row["expr_str"]))	#.2024->.24
							user_url=str(f'tg://openmessage?user_id={id_user}')	#fix –¥–ª—è –ª—é–±–∏—Ç–µ–ª—ñ–≤ –º—ñ–Ω—è—Ç—å –π–æ–≥–æ
							if db_sqlite3:
								try:
									c.execute("INSERT INTO zarazy (user_id,when_int,bio_str,bio_int,expr_int,expr_str) VALUES (?, ?, ?, ?, ?, ?)", (int(id_user),int(when_int),str(bio_str),int(bio_int),int(expr_int),str(expr_str))); conn.commit()
									saved+=1
								except:
									try:
										c.execute("UPDATE zarazy SET when_int = :wh, bio_str = :xp, bio_int = :xpi, expr_int = :end, expr_str = :do WHERE user_id = :z AND when_int <= :wh;", {"wh":int(when_int),"xp":str(bio_str),"xpi":int(bio_int),"end":int(expr_int),"do":str(expr_str),"z":int(id_user)}); conn.commit()
									except Exception as Err:
										print(f'err: {Err} zarazy')
								msg=f"{saved} —ñ–∑ {count}"
							else:
								msg='–¥–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –æ–±–∏–¥–≤—ñ –±–∞–∑–∏ True'
				except Exception as Err:
					print(f'err: {Err} zarazy localhost')
					msg=Err
			m=await event.reply(msg)
			await asyncio.sleep(5)
			await client.delete_messages(event.chat_id, [event.id, m.id])
		
		
		@client.on(events.NewMessage(outgoing=True, pattern='.ping'))
		async def cmd_ping(event):
			# Say "pong!" whenever you send "!ping", then delete both messages
			m = await event.reply('pong!')
			await asyncio.sleep(5)
			await client.delete_messages(event.chat_id, [event.id, m.id])
		
		await client.run_until_disconnected()

asyncio.run(main())
