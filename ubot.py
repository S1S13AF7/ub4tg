# -*- coding: utf-8 -*-

import asyncio

from datetime import datetime, timedelta
from telethon import TelegramClient, events, functions, types, utils

import os
import re
import random
import time
import json

import sqlite3

import shutil
import typing

if os.name == 'nt':
	import win32api

sessdb = 'tl-ub' # –Ω–∞–∑–≤–∞ –±–∞–∑–∏ —Å–µ—Å—ñ—ó telethon
default_directory = '' # "—Ä–æ–±–æ—á–∞ –ø–∞–ø–∫–∞" –±–æ—Ç–∞
CONFIG_PATH = "conf.json"	# main config file
noeb_file = "noeb.json"		# –∫–æ–≥–æ –Ω–µ–Ω–∞–¥–∞ –∑–∞—Ä–∞–∂–∞—Ç—å –∞–π–¥—ñ—à–∫–∏
chts_file = "chts.json"		# —á–∞—Ç–∏ –¥–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º—É—Ç—å "—á—ñ—Ç–∏"

is_termux = os.environ.get('TERMUX_APP__PACKAGE_NAME') or os.environ.get('TERMUX_APK_RELEASE')

termux_api = False # —Ç–∞–º –Ω–∏–∂—á–µ –±—É–¥–µ –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–æ —è–∫—â–æ is_termux == True

treat_as_true = ('true','1','t','y','yes','yeah','yup')# –≤—Å–µ —ñ–Ω—à–µ False

if is_termux:
	import sys
	# –º–∞–π–∂–µ –≤—Å–µ —â–æ –¥–ª—è —Ç–µ—Ä–º—É–∫—Å–∞ —è –≤–∫—Ä–∞–≤ –∑ —Ñ–æ—Ä–∫–∞ –±–æ—Ç–∞.
	print('Termux detected, checking permissions...')
	termux_api = os.system('termux-api-start') == 0 #	—à—Ç—É–∫–∞ –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—å.
	if (os.environ.get('TERMUX_APP__APK_RELEASE') or os.environ.get('TERMUX_APK_RELEASE')) not in ('F_DROID', 'GITHUB'):
		print('You use not f-droid/github apk release, it may have problems...')
		print('F-droid termux release here: https://f-droid.org/en/packages/com.termux/')
		print('Github termux release here: https://github.com/termux/termux-app/releases')
	if float(os.environ.get('TERMUX_VERSION')[:5]) < 0.118:
		print('You use old version of termux, highly recommended that you update to v0.119.0 or higher ASAP for various bug fixes, including a critical world-readable vulnerability')
	if termux_api:
		print('‚úÖ termux API work')
	if os.access('/sdcard', os.W_OK):
		print('‚úÖ –¥–æ–∑–≤—ñ–ª –Ω–∞ –∑–∞–ø–∏—Å')
		default_directory = '/sdcard/ub4tg'
		os.system(f'mkdir -p {default_directory}')
		CONFIG_PATH = f'{default_directory}/conf.json' # –≤ –¥–æ—Å—Ç—É–ø–Ω—É –±–µ–∑ —Ä—É—Ç–∞
		noeb_file = f'{default_directory}/{noeb_file}' # –≤ –¥–æ—Å—Ç—É–ø–Ω—É –±–µ–∑ —Ä—É—Ç–∞
		chts_file = f'{default_directory}/{chts_file}' # –≤ –¥–æ—Å—Ç—É–ø–Ω—É –±–µ–∑ —Ä—É—Ç–∞
	else:
		print('permission denied to write on internal storage')
		print('trying get permission...')
		os.system('termux-setup-storage')
		print('Restart termux [Press CTRL+D or command "exit"]')
		sys.exit(0)

if not os.path.exists(CONFIG_PATH):
	api_id = int(input('enter api_id from https://my.telegram.org/ :'))
	api_hash = input('enter api_hash from https://my.telegram.org/ :')
	
	a_h = input('enable automatic use medkit? [y/n]: ').lower() in treat_as_true
	a_404_p = input('enable automatic bioeb if victim not found or expired? It will be trigger on "–ñ–µ—Ä—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" [y/n]: ').lower() in treat_as_true
	
	new_config = {
	'api_id': api_id,
	'api_hash': api_hash,
	'db_pymysql': False,
	'db_sqlite3': True,
	'wakelock': False,
	'a_404_p': a_404_p,
	'farm': False,
	'mine': False,
	'a_h': a_h,
	'ch_id': 0
	}
	# api_id & api_hash - –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏; 
	# db_pymysql - —á–∏ —é–∑–∞—Ç—å MySQL? (default: False); 
	# a_404_p - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å–æ–∂—Ä–∞—Ç—å –ø–∞—Ü—ñ—î–Ω—Ç–∞ —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ; 
	# ch_id - —ñ–¥ —á–∞—Ç–∞ –¥–µ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –º–∞–≥—ñ—è. –≤–∏—Å—Ç–∞–≤–∏—Ç—å—Å—è —Å–∞–º–æ —è–∫—â–æ –±—É–≤ 0; 
	# wakelock - —á–∏ —é–∑–∞—Ç—å wakelock (—É –º–µ–Ω–µ –≤—ñ–¥ –Ω—å–æ–≥–æ –Ω–µ–º–∞ —Ç–æ–ª–∫—É); 
	with open(CONFIG_PATH, "w", encoding="utf-8") as configfile:
		json.dump(new_config, configfile,ensure_ascii=False, indent='	')

with open(CONFIG_PATH, "r", encoding="utf-8") as configfile:
	#from types import SimpleNamespace
	config = json.load(configfile)
	print('‚úÖ config loaded')
	
	api_id = int(config['api_id'])
	api_hash = config['api_hash']
	
	db_pymysql = bool(config['db_pymysql'] or False)
	db_sqlite3 = bool(True) # Always true; –∞–±–æ –∑–º—ñ–Ω—ñ—Ç—å.
	
	a_404_p = bool(config['a_404_p'] or False)
	ch_id = int(config['ch_id'] or 0)  # id —á–∞—Ç–∞
	mine= bool(config['mine'] or False)# –≤–º–∏–∫–∞—Ç—å –º–∞–π–Ω?
	
	if ch_id > 0:
		ch_id=0
		save_config_key('ch_id',ch_id)

########################################################################

bf_mode='Normal'# dnt edit this. :Normal|Slow|Fast|Turbo # is beta...
bf_run = False	# dnt edit this. 

ostalos_pt=10	# –æ—Å—Ç–∞–ª–æ—Å—å. –±—É–¥–µ –º—ñ–Ω—è—Ç–∏—Å—å. 
rs_min= 11	# —ñ–Ω—Ç–µ—Ä–≤–∞–ª. –±—É–¥–µ –º—ñ–Ω—è—Ç–∏—Å—å. 
rs_max=3600	# —ñ–Ω—Ç–µ—Ä–≤–∞–ª. –±—É–¥–µ –º—ñ–Ω—è—Ç–∏—Å—å. 

my_days=10	# —Å–≤—ñ–π –ª–µ—Ç–∞–ª. –≤–∏—Å—Ç–∞–≤–∏—Ç—å—Å—è –∫–æ–ª–∏ –±–æ—Ç "–ø–æ–±–∞—á–∏—Ç—å".

irises = [707693258,5137994780,5226378684,5434504334,5443619563]

########################################################################

def bfrnm(p=None):
	if p is None:
		return p
	r=re.findall(r'([0-9]+)_victims_([0-9]+)_([0-9]+)\.json',p)
	if r:
		id=r[0][1]#	—á—ñ–π –±–µ–∫–∞–ø
		fn=re.sub(f'{r[0][0]}_victims_{r[0][1]}_{r[0][2]}',id,p)
		if os.path.exists(fn):
			os.remove(fn)
		shutil.copy2(p, fn)
		os.remove(p)
		return fn
	return

########################################################################

def ffnof(p=None):
	#FixFuckingNamesOfFiles
	if p is None:
		return p
	sho = ' ()' # —Ç—ñ —Å–∏–º–≤–æ–ª–∏ —î –≤ –±–µ–∫–∞–ø–∞—Ö –∑ —ñ–Ω—à–∏—Ö –±–æ—Ç—ñ–≤.
	fn=re.sub(sho,'_',p) # –Ω—É —Ç–∞–∫ —Ç–æ –≤–∂–µ –æ–∫?!
	if os.path.exists(fn):
		os.remove(fn)
	shutil.copy2(p, fn)
	os.remove(p)
	return fn

########################################################################

def get_config_key(key: str) -> typing.Union[str, bool]:
	"""
	Parse and return key from config
	:param key: Key name in config
	:return: Value of config key or `False`, if it doesn't exist
	"""
	try:
		with open(CONFIG_PATH, "r", encoding="utf-8") as f:
			config = json.load(f)

		return config.get(key, False)
	except FileNotFoundError:
		return False

########################################################################

def save_config_key(key: str, value: str) -> bool:
	"""
	Save `key` with `value` to config
	:param key: Key name in config
	:param value: Desired value in config
	:return: `True` on success, otherwise `False`
	"""
	try:
		# Try to open our newly created json config
		with open(CONFIG_PATH, "r", encoding="utf-8") as f:
			config = json.load(f)
	except FileNotFoundError:
		# If it doesn't exist, just default config to none
		# It won't cause problems, bc after new save
		# we will create new one
		config = {}
	
	# Assign config value
	config[key] = value
	
	# And save config
	with open(CONFIG_PATH, "w", encoding="utf-8") as f:
		json.dump(config, f,ensure_ascii=False, indent='	')
	
	return True

########################################################################
chts=[]
try:
	chts_file = "chts.json"		# —á–∞—Ç–∏:
	with open(chts_file, "r") as read_file:
		chts = json.load(read_file)
except:
	with open(chts_file, "w", encoding="utf-8") as write_file:
		json.dump(chts, write_file,ensure_ascii=False, indent='	')
########################################################################
noeb=[707693258,5137994780,5226378684,5434504334,5443619563,6333102398,7959200286]
try:
	#noeb_file = "noeb.json"
	with open(noeb_file, "r") as read_file:
		noeb = json.load(read_file)
except:
	with open(noeb_file, "w", encoding="utf-8") as write_file:
		json.dump(noeb, write_file,ensure_ascii=False, indent='	')

########################################################################

async def main():
	async with TelegramClient(sessdb,api_id,api_hash,timeout=300) as client:
		client.parse_mode="HTML"
		print('User-Bot started')
		me= await client.get_me()
		my_id = int(me.id)
		print(f'üÜî {my_id}')
		
		if os.name == 'nt':
			win32api.SetConsoleTitle(f'{my_id}')
		elif os.name == 'posix':
			print(f'\33]0;{my_id}\a', end='', flush=True)
		
		if is_termux:
			if get_config_key("wakelock"):
				# —è–∫—â–æ —É –∫–æ–Ω—Ñ—ñ“ë—É "wakelock": true,
				print('Prevent killing termux by android, getting wakelock...')
				os.system('termux-wake-lock')
				print('This can cause battery drain!')

		if db_pymysql:
			
			import pymysql
			import pymysql.cursors
			
			con = pymysql.connect(host='localhost',
			user='root',
			password='V3rY$tR0NgPaS$Sw0Rd',
			db='db',
			charset='utf8mb4',
			cursorclass=pymysql.cursors.DictCursor)
			d = con.cursor()
			d.execute('''CREATE TABLE IF NOT EXISTS `tg_bio_attack` (
			`date` int(11) unsigned NOT NULL DEFAULT '0',
			`who_id` bigint(20) unsigned NOT NULL DEFAULT '0',
			`user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
			`profit` int(11) unsigned NOT NULL DEFAULT '1',
			`until_int` int(11) unsigned NOT NULL DEFAULT '0',
			`until_str` varchar(11) NOT NULL DEFAULT '0',
			UNIQUE KEY `UNIQUE` (`who_id`,`user_id`)
			);''');
			con.commit()
			d.execute('''CREATE TABLE IF NOT EXISTS `tg_bio_users` (
			`user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
			`profit` int(11) unsigned NOT NULL DEFAULT '1',
			`virus` varchar(200) NOT NULL DEFAULT '',
			UNIQUE KEY `user_id` (`user_id`)
			);''');
			con.commit()
			d.execute('''CREATE TABLE IF NOT EXISTS `tg_users_url` (
			`user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
			`when_int` int(11) unsigned NOT NULL DEFAULT '0',
			`u_link` varchar(64) NOT NULL DEFAULT '',
			`f_name` text NOT NULL,
			PRIMARY KEY (`user_id`),
			UNIQUE KEY (`u_link`)
			);''');
			con.commit()
		
		if db_sqlite3:
			conn = sqlite3.connect(f"{my_id}.sqlite")#–ø–æ–∫–ª–∞—Å—Ç–∏ –±–∞–∑—É —Ä—è–¥–æ–º?
			#conn = sqlite3.connect(f"D:\\Misc\\projects\\Python\\ub4tg_db\\{my_id}.sqlite")# –ê–±–æ –ø–æ–≤–Ω—ñ—Å—Ç—é
			
			if is_termux:
				conn = sqlite3.connect(f"{default_directory}/{my_id}.sqlite")
			
			c = conn.cursor()
			
			c.execute('''CREATE TABLE IF NOT EXISTS avocado	(
			user_id	INTEGER NOT NULL DEFAULT 0 UNIQUE,
			when_int	INTEGER NOT NULL DEFAULT 0,
			bio_int	INTEGER NOT NULL DEFAULT 1,
			expr_int	INTEGER NOT NULL DEFAULT 0,
			expr_str	VARCHAR NOT NULL DEFAULT 0
			)''');
			conn.commit()
			
			# https://www.sqlite.org/pragma.html
			c.execute('PRAGMA optimize=0x10002'); conn.commit()
			c.execute('VACUUM'); conn.commit()
			def optimize():
				c.execute('PRAGMA optimize'); conn.commit()
				c.execute('VACUUM'); conn.commit()

		if mine:
			try:
				await client.send_message(6333102398,'–ú–∞–π–Ω')
			except Exception as wtf:
				print(wtf)	#	print
		
		####################################################################
		
		async def get_id(url):
			user_id = 0
			if "tg://openmessage?user_id=" in url:
				user_id = int(re.findall(r'user_id=([0-9]+)',url)[0])
				#print(user_id)# –ê —Ç—É—Ç —Ä–æ–∑–∫–æ–º–µ–Ω—Ç—É–≤–∞—Ç—å —è–∫—â–æ –Ω–∞–¥–∞ –±–∞—á–∏—Ç—å
				return user_id
			if "t.me/" in url:
				if db_pymysql:
					try:
						d.execute("SELECT * FROM `tg_users_url` WHERE `u_link` = '%s' ORDER BY `when_int` DESC" % str(url)); 
						user = d.fetchone();
						if user is None:
							pass
						else:
							user_id = int(user['user_id'])
							print(f'{url} in db: @{user_id}')
					except:
							pass
				if user_id==0:
					#return user_id # fucking limit # —Ä–æ–∑–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ —â–æ–± –Ω–µ —Ä–µ–∑–æ–ª–≤.
					try:
						user_entity = await client.get_entity(url)
						if user_entity.id:
							user_id = int(user_entity.id)
							user_fn = user_entity.first_name or ''
							print(f'‚úÖ ok: {url} @{user_id}')
							if db_pymysql:
								try:
									d.execute("INSERT INTO `tg_users_url` (`when_int`,`user_id`,`u_link`,`f_name`) VALUES (%s,%s,%s,%s) ON DUPLICATE KEY UPDATE user_id = VALUES (user_id),u_link = VALUES (u_link),f_name = VALUES (f_name),when_int = VALUES (when_int);", (int(time.time()),int(user_id),str(url),str(user_fn))); con.commit()
								except Exception as Err:
									print(f'E:{Err}')
					except Exception as Err:
						print(f'E:{Err}')
						#pass
			return user_id
		
		####################################################################
		
		async def message_q( # —Å–ø–∏–∑–∂–µ–Ω–æ
				text: str,
				user_id: int,
				mark_read: bool = False,
				delete: bool = False,
		):
				"""–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç"""
				async with client.conversation(user_id, exclusive=False) as conv:
						msg = await conv.send_message(text)
						response = await conv.get_response()
						if mark_read:
								await conv.mark_read()
						return response
		
		####################################################################
		
		@client.on(events.NewMessage(incoming=True,from_users=6333102398,pattern=
		r'.*(–π–æ–±–Ω—É–≤|–ø–æ–¥–≤–µ—Ä–≥(–ª–∞)?|infected|—Å–∏–∫–¥–∏|–∞—Ç–∞–∫–æ–≤–∞–ª|–≤—ã–µ–±–∞–ª|–∏–Ω—Ñ–∏—Ü–∏—Ä–æ–≤–∞–ª|–Ω–∞–ø—É–≥–∞–ª–∞|–Ω–∞—Å—Ä–∞–ª|–Ω–æ–∫–∞—É—Ç–∏—Ä–æ–≤–∞–ª|–æ–±–º–∞–Ω—É–ª–æ|–ø–æ—Å—Ç–∞–≤–∏–ª–∞|—Ä–∞—Å—Å–º–µ—à–∏–ª).*'))
		async def infect(event):
			# —Ö—Ç–æ —Ç–∞–º –∫–æ–≥–æ —Ç–æ–≥–æ
			m = event.message
			t = m.raw_text
			when = int(datetime.timestamp(m.date))
			if m.sender_id ==6333102398:
				if m.entities:
					if len(m.entities) > 1:
						h= utils.sanitize_parse_mode('html').unparse(t,m.entities)
						r= re.findall(r'<a href="tg://openmessage\?user_id=([0-9]+)">.*</a>.+<a href="tg://openmessage\?user_id=([0-9]+)">',h)
						p= re.findall(r'¬´(.+)¬ª',t)	#	–ø–∞—Ç–æ–≥–µ–Ω–æ–º
						if r:
							#print(h)
							exp_int=1
							experience=1
							u1id =int(r[0][0])
							u2id =int(r[0][1])
							when=int(datetime.timestamp(m.date))
							days=int(re.sub(r' ','',re.findall(r'([0-9]+) (–¥|d).*',t)[0][0]))
							a=datetime.fromtimestamp(when)+timedelta(days=int(days), hours=3)
							do_int=datetime.timestamp(a)
							do_txt=str(a.strftime("%d.%m.%Y"))
							
							try:
								experience=re.sub(' ','',re.findall(
								r" ([0-9\.\,k\ ]+).+ \| ([\+|\-]([0-9\ ]+)|—Ö–∑)",t)[0][0])
								e=re.findall(r'([0-9]+)',experience)
								if e==experience:
									exp_int=int(e)
							except Exception as Err:
								print(f'Err: {Err} (experience)')
							
							if ',' in experience:
								experience=re.sub(r',', r'.',experience)
							if 'k' in experience:
								exp_int=int(float(re.sub('k', '',experience)) * 1000)
							else:
								exp_int=int(experience)
							
							if u1id > 0 and u2id > 0:
								if u1id==my_id:
									global ostalos_pt,my_days
									ostalos_pt=int(re.sub(r' ','',re.findall(r' –û—Å—Ç–∞–ª–æ—Å—å: ([0-9\ ]+) —à—Ç.',t)[0]))
									my_days=int(days)	# —Å–≤—ñ–π –ª–µ—Ç–∞–ª. –¥–ª—è —Å–ø–∏—Å–∫—ñ–≤ (—Ç–∞–º –Ω–µ –ø–∏—à–µ –Ω–∞ —Å–∫—ñ–ª—å–∫–∏ –¥.)
								
								if p:
									p=str(p[0])
								else:
									p=''
								
								if db_sqlite3:
									
									if u1id==my_id:
										try:
											c.execute("INSERT OR REPLACE INTO avocado (user_id,when_int,bio_int,expr_int,expr_str) VALUES (?,?,?,?,?)",
											(int(u2id),int(when),int(exp_int),int(do_int),str(do_txt))); conn.commit()
										except Exception as Err:
											print(f'err: {Err} avocado')
									elif u2id!=my_id and u2id not in noeb:
										try:
											c.execute("INSERT INTO avocado(user_id,when_int,bio_int,expr_int) VALUES (?,?,?,?)", (int(u2id),int(when),int(exp_int),int(0))); conn.commit()# save not my pacients
										except:
											try:
												c.execute("UPDATE avocado SET when_int = :wh, bio_int = :xpi WHERE user_id = :z AND expr_int < :wh;", {"wh":int(when),"xpi":int(exp_int),"z":int(u2id)}); conn.commit()
											except Exception as Err:
												print(f'err: {Err} avocado upd not my')
												#pass
									
								if db_pymysql:
									try:
										# date 	who_id 	user_id 	profit 	until_int 	until_str
										d.execute("INSERT INTO `tg_bio_attack` (`who_id`, `user_id`, `date`, `profit`, `until_int`, `until_str`) VALUES (%s,%s,%s,%s,%s,%s) ON DUPLICATE KEY UPDATE date=VALUES(date),profit=VALUES(profit),until_int=VALUES(until_int),until_str=VALUES(until_str);",(int(u1id),int(u2id),int(when),int(exp_int),int(do_int),str(do_txt))); con.commit()
									except Exception as Err:
										print(f'err: {Err} (tg_bio_attack)')
										#pass
									try:
										# user_id	profit	virus
										d.execute("INSERT INTO `tg_bio_users` (`user_id`, `profit`) VALUES (%s,%s) ON DUPLICATE KEY UPDATE profit=VALUES (profit);", (int(u2id),str(experience))); con.commit()
									except Exception as Err:
										print(f'err: {Err} (tg_bio_users)')
										#pass
									if p:
										#print(p)
										try:
											d.execute('''INSERT INTO `tg_bio_users` 
											(`user_id`, `virus`) VALUES (%s,%s) 
											ON DUPLICATE KEY UPDATE virus=VALUES(virus)''', 
											(int(u1id),str(p))); con.commit()
										except Exception as Err:
											print(f'err: {Err} (tg_bio_users)')
								
								print(f'ü•ë @{u1id} –ø–æ–¥–≤–µ—Ä–≥(–ª–∞) @{u2id} +{experience}')	# –ø–æ–∫–∞–∑–∞—Ç—å
		
		####################################################################
		
		@client.on(events.MessageEdited(incoming=True,
		pattern=r'üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è .+ –ø–æ–¥–≤–µ—Ä–≥–ª–∞ .+ —Å–ø–∏—Å–∫–æ–º:',
		from_users=6333102398))	#	–ê–≤–æ–∫–∞–¥–æ
		async def infect_list(event):
			m = event.message
			t = m.raw_text
			if m.entities:
				if len(m.entities) > 1:
					w=int(datetime.timestamp(m.date))	#	when_int
					h=utils.sanitize_parse_mode('html').unparse(t,m.entities)
					u=int(re.findall(r'–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è <a href="tg://openmessage\?user_id=([0-9]+)">',h)[0])	#	who
					r=re.findall(r'<code>([0-9]+)</code> \| \+([0-9,k]+) –æ–ø.',h) # list of infect
					if u==my_id:
						global ostalos_pt
						ostalos_pt=int(re.sub(r' ','',re.findall(r'–û—Å—Ç–∞–ª–æ—Å—å: ([0-9\ ]+) —à—Ç.',t)[0]))#–û—Å—Ç–∞–ª–æ—Å—å:
					for v in r:
						uid=int(v[0])
						bio=str(v[1])
						if ',' in bio:
							bio=re.sub(r',', r'.',bio)
						if 'k' in bio:
							bio=int(float(re.sub('k', '',bio)) * 1000)
						else:
							bio=int(bio)
						a=datetime.fromtimestamp(w)+timedelta(days=int(my_days))
						do_int=int(datetime.timestamp(a))
						do_txt=str(a.strftime("%d.%m.%Y"))
						if db_sqlite3:
							if u==my_id:
								try:
									c.execute("INSERT OR REPLACE INTO avocado (user_id,when_int,bio_int,expr_int,expr_str) VALUES (?,?,?,?,?)",
									(int(uid),int(w),int(bio),int(do_int),str(do_txt))); conn.commit()
								except Exception as Err:
									print(f'err: {Err} avocado')
							elif uid!=my_id and uid not in noeb:
								try:
									c.execute("INSERT INTO avocado(user_id,when_int,bio_int,expr_int) VALUES (?,?,?,?)", (int(uid),int(w),int(bio),int(0))); conn.commit()# save not my pacients
								except:
									try:
										c.execute("UPDATE avocado SET when_int = :wh, bio_int = :xpi WHERE user_id = :z AND expr_int < :wh;", {"wh":int(w),"xpi":int(bio),"z":int(uid)}); conn.commit()
									except Exception as Err:
										print(f'err: {Err} avocado upd not my')
										#pass
									
						if db_pymysql:
							if u==my_id:
								try:
									d.execute("INSERT INTO `tg_bio_attack` (`who_id`, `user_id`, `date`, `profit`, `until_int`, `until_str`) VALUES (%s,%s,%s,%s,%s,%s) ON DUPLICATE KEY UPDATE date=VALUES(date),profit=VALUES(profit),until_int=VALUES(until_int),until_str=VALUES(until_str);",(int(u),int(uid),int(w),int(bio),int(do_int),str(do_txt))); con.commit()
								except Exception as Err:
									pass
							try:
								# user_id	profit	virus
								d.execute("INSERT INTO `tg_bio_users` (`user_id`, `profit`) VALUES (%s,%s) ON DUPLICATE KEY UPDATE profit=VALUES (profit);", (int(uid),int(bio))); con.commit()
							except Exception as Err:
								print(f'err: {Err} (tg_bio_users)')
								#pass
						if u==my_id:
							print(f'üÜî {uid} ‚ûï{bio}') # –ø–æ–∫–∞–∑–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—ñ
					if db_sqlite3:
						optimize()
		
		####################################################################
		
		@client.on(events.NewMessage(pattern='.+–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –∂–µ—Ä—Ç–≤'))
		async def bio_backup(event):
			m = event.message
			s = m.sender_id
			if m.fwd_from:
				s=m.fwd_from.from_id.user_id
			if s == 6333102398: #	from –ê–≤–æ–∫–∞–¥–æ
				file=bfrnm(await m.download_media(file=default_directory))
				if file is None:
					return
				print(f'üìÉ backup file saved:{file}') # –Ω–µ–≤–ª—ñ–∑–∞–ª–æ –≤ —Ä—è–¥–æ–∫
				global bf_run	# –±—É–¥–µ–º–æ —Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É
				br=bf_run	# –∑–∞–ø–∞–º'—è—Ç–∞—î —á–∏ –∑–∞–ø—É—â–µ–Ω–æ?
				id=re.findall(r'([0-9]+)\.json',file)[0]
				wh=int(datetime.timestamp(m.date))
				my=event.chat_id==6333102398
				count=0
				added=0
				updtd=0
				mysql=0
				errrs=0
				victims = None
				raw_victims = None
				file_format = None
				with open(file, 'r') as backup:
					if file.lower().endswith('.json'):
						victims = json.load(backup)
						file_format = 'json'
						if br:
							bf_run = False
							#print('paused')
						for v in victims:
							count+=1
							u_id = int(v['user_id'])
							profit=int(v['profit'] or 1)
							when = int(v['from_infect'])
							expr = int(0) # –¥–ª—è –Ω–µ—Å–≤–æ—ó—Ö
							if my: # —è–∫—â–æ —Ü–µ —Å–≤—ñ–π –±–µ–∫–∞–ø
								expr = int(v['until_infect'])
								a=datetime.fromtimestamp(expr)
								do=str(a.strftime("%d.%m.%Y"))
							else:
								do=''
							if db_sqlite3:
								try:
									c.execute("INSERT INTO avocado(user_id,when_int,bio_int,expr_int,expr_str) VALUES (?,?,?,?,?)",(int(u_id),int(when),int(profit),int(expr),str(do))); conn.commit()
									print(f'''[@{u_id}] +{profit}''')# –ø–æ–∫–∞–∑–∞—Ç—å
									added+=1
								except:
									try:
										c.execute("UPDATE avocado SET when_int = :wh, bio_int = :xpi, expr_int = :expr, expr_str = :exprs WHERE user_id = :z AND expr_int < :whxpr;", {"wh":int(when),"xpi":int(profit),"expr":int(expr),"exprs":str(do),"z":int(u_id),"whxpr":int(expr if my else wh)}); conn.commit()
										updtd+=1
									except Exception as Err:
										print(f'err: {Err} avocado backup')
										errrs+=1
										# pass
							if db_pymysql:
								try:
									d.execute("INSERT INTO `tg_bio_attack` (`who_id`, `user_id`, `date`, `profit`, `until_int`, `until_str`) VALUES (%s,%s,%s,%s,%s,%s) ON DUPLICATE KEY UPDATE date=VALUES (date),profit=VALUES (profit),until_int=VALUES (until_int),until_str = VALUES (until_str);", (int(id),int(u_id),int(when),str(profit), int(expr),str(do))); con.commit()
									mysql+=1
								except Exception as Err:
									print(f'err: {Err} (tg_bio_attack) (backup)')
									errrs+=1
								try:
									query=f"INSERT IGNORE `tg_bio_users`(`user_id`) VALUES ('{u_id}');"
									con.query(query)
								except Exception as Err:
									print(f'err: {Err} (tg_bio_users)')
									errrs+=1
						del victims# free memory
						
						if db_sqlite3:
							optimize()
						
						if br:
							bf_run = True
						
						info = ''
						if count > 0:
							info = f'count: {count}'
						if added > 0:
							info = f'{info}\nadded: {added}'
						if errrs > 0:
							info = f'{info}\nerrrs: {errrs}'
						print(info)
						if len (info) > 0:
							if not my:
								if added > 0:
									try:
										await event.reply(info)
									except:
										pass
							if termux_api:
								os.system(
								f"termux-notification --title '{my_id}' --content '{info}'"
								)
		
		####################################################################
		
		@client.on(events.NewMessage(outgoing=True, pattern=r'\.fromtxt$'))
		# –∫—Ä—á —è –≤–∂–µ —Ç—É–ø–æ –≤—Å—ñ—Ö —Å–æ–∂—Ä–∞–≤, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—á–∫–∏ (beta)
		async def cmd_bio_steal_backup_fromtxt(event):
			m = event.message
			if event.reply_to:
				reply = await client.get_messages(event.peer_id, ids=event.reply_to.reply_to_msg_id)
				try:
					await event.edit('Downloading file...')
				except Exception as wtf:
					print(wtf)	#	print
				file=ffnof(await reply.download_media(file=default_directory))
				if file is None:
					e = '‚ö†Ô∏è file is None?! (WTF?)' # —Ö–∑ —á–æ–º—É —Ç–∞–∫ –±—É–≤–∞—î, –∞–ª–µ –±—É–≤–∞.
					try:
						await event.edit(e)
					except Exception as wtf:
							print(wtf)	#	print
					print(e)
					return
				print(f'üìÉ saved:{file}') # –∫—É–¥—è?
				global bf_run	# –±—É–¥–µ–º–æ —Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É
				br=bf_run	# –∑–∞–ø–∞–º'—è—Ç–∞—î —á–∏ –∑–∞–ø—É—â–µ–Ω–æ?
				print(f'üìÉ saved:{file}')
				victims = None
				raw_victims = None
				file_format = None
				with open(file,"r",encoding="utf-8") as f:
					if file.lower().endswith('.txt'):
						raw_victims = f.readlines()
						file_format = 'txt'
						print('‚úÖ ok.')
						if br:
							bf_run = False
							#print('paused')
						try:
							await event.edit('üìù Processing raw txt victims...')
						except Exception as wtf:
							print(wtf)	#	print
					else:
						try:
							await event.edit('‚ö†Ô∏è Format ùô£ùô§ùô© supported.')
						except Exception as wtf:
							print(wtf)	#	print
						print('‚ö†Ô∏è ùô£ùô§ùô© ok.')
						return
					count=0
					added=0
					errrs=0
					for raw_v in raw_victims:
						if raw_v == '':
							continue
						user_id = re.findall(r'(tg://openmessage\?user_id=|@)([0-9]{4,10})',raw_v)
						if not user_id:
							continue
						user_id = int(user_id[0][1])
						profit = 1 # –ê–±–æ –±—ñ–ª—å—à–µ.
						if user_id:
							print(raw_v)
							count +=1
							id_user = user_id
							bio_int = profit
							when_int= 0
							if db_sqlite3:
								try:
									c.execute("INSERT INTO avocado(user_id,when_int,bio_int,expr_int) VALUES (?,?,?,?)", (int(id_user),int(0),int(bio_int),int(0))); conn.commit()# save not my pacients
									added+=1
								except Exception as Err:
									pass
									#errrs+=1
									# —à–≤–∏–¥—à–µ –∑–∞ –≤—Å–µ –ø—Ä–æ—Å—Ç–æ –≤–∂–µ —î, —Ç–æ–º—É —Ü–µ –Ω–µ –ø–æ–º–∏–ª–∫–∞ –Ω–∞–≤—ñ—Ç—å.
					#rof
					
					if db_sqlite3:
						optimize()
						
						if br:
							bf_run = True
						
						info = ''
						if count > 0:
							info = f'count: {count}'
						if added > 0:
							info = f'{info}\nadded: {added}'
						if errrs > 0:
							info = f'{info}\nerrrs: {errrs}'
						print(info)
						if len (info) > 0:
							try:
								await event.reply(info)
							except:
								pass
							if termux_api:
								os.system(
								f"termux-notification --title '{my_id}' --content '{info}'"
								)
					del victims  # free memory
					del raw_victims
		
		####################################################################
		
		@client.on(events.NewMessage(pattern='üë∫ –Æ–∑–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!'))
		async def avocado_404(event):
			m = event.message
			if m.sender_id == 6333102398:
				if event.reply_to:
					reply = await client.get_messages(event.peer_id, ids=event.reply_to.reply_to_msg_id)
					t= reply.raw_text
					if reply.entities:
						t=utils.sanitize_parse_mode('html').unparse(t,reply.entities)
					r= re.findall(r'([0-9]{1,})',t)
					if r:
						# —î —ñ–¥ —é–∑–µ—Ä–∞ —è–∫–æ–≥–æ –Ω–µ–≤–¥–∞–ª–æ—Å—å
						id=int(r[0]) # –Ω—É –≤–ª–∞—Å–Ω–µ —ñ–¥.
						global noeb
						if id not in noeb:
							noeb.append(id)
						if db_pymysql:
							try:
								con.query(f"DELETE FROM `tg_bio_attack` WHERE `user_id` = {id};"); # –Ω–∞—Ñ—ñ–≥.
							except Exception as Err:
								print(f'err: {Err} in DELETE FROM `tg_bio_attack` WHERE `user_id` = {id}')
							try:
								con.query(f"DELETE FROM `tg_bio_users` WHERE `user_id` = {id};"); # –Ω–∞—Ñ—ñ–≥.
							except Exception as Err:
								print(f'err: {Err} in DELETE FROM `tg_bio_users` WHERE `user_id` = {id}')
							
							try:
								con.query(f"DELETE FROM `tg_users_url` WHERE `user_id` = {id};");
							except Exception as Err:
								print(f'err: {Err} in DELETE FROM `tg_users_url` WHERE `user_id` = {id}')
						
						if db_sqlite3:
							try:
								c.execute("DELETE FROM avocado WHERE user_id = %d" % int(id)); conn.commit()
							except Exception as Err:
								print(f'err: {Err} in DELETE FROM avocado WHERE `user_id` = {id}')
		
		####################################################################
		
		@client.on(events.NewMessage(outgoing=True, pattern=r'\.biofuck$'))
		async def cmd_bf(event):			# –∫—Ä—á –∞–∫—É—Ä–∞—Ç–Ω–æ –∑ —Ü–∏–º,–≤–¥—Ä—É–≥ —à–æ —è –Ω—ñ—á–æ
			global ch_id, bf_mode, bf_run, ostalos_pt
			m = event.message
			text = m.raw_text
			when = int(datetime.timestamp(m.date))
			await asyncio.sleep(random.uniform(0.4567,1))	# –∂–¥–µ–º
			def get_some_patients(limit:int=1000,when:int=time.time()):
				query=f"SELECT * FROM `avocado` WHERE expr_int <= {when} OR bio_int==1 ORDER BY expr_int ASC, when_int ASC LIMIT {limit}"
				users=list(c.execute(query).fetchall())
				return users
			if bf_run:
				pong='‚úÖ –≤–∂–µ –ø—Ä–∞—Ü—é—î...' # ok.
				await event.edit(pong) # —Ä–µ–¥.
			elif event.chat_id > 0:
				pong='–ê–ª–æ—É —Ü–µ –Ω–µ —á–∞—Ç!' #wtf?!
				await event.edit(pong) # —Ä–µ–¥.
			else:
				bf_run = True
				sndmsgs= 0#++
				pong='‚úÖ –ø–æ–≥–Ω–∞–ª–∏...'
				try:
					await event.edit(pong) # —Ä–µ–¥.
				except Exception as wtf:
					print(wtf)	#	print
				if ch_id != event.chat_id:
					ch_id = event.chat_id
					save_config_key('ch_id',ch_id)
				while bf_run:
					#	‚úÖ –ø–æ–≥–Ω–∞–ª–∏?
					count=int(c.execute(f"SELECT COUNT(*) FROM `avocado` WHERE expr_int<{when} OR bio_int==1").fetchone()[0]) # —Ä–∞—Ö—É—î–º–æ —Ä–∞–∑–æ–º –∑ –æ–¥–∏–Ω–∏—á–∫–∞–º–∏, –∞ —Ç–æ –ø–∏—à–µ, —â–æ –Ω–µ–º–∞ ü§∑
					if count< len(noeb)+2: # —Ç–∞–∫ —è–∫, —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω–æ, —Ç–∞–º –º–æ–∂—É—Ç—å –≤—Å—ñ –≤–æ–Ω–∏ + —Å–≤—ñ–π –∞–π–¥—ñ, —Ç–æ–º—É –∂—Ä–∞—Ç—å –Ω–µ–º–∞
						await asyncio.sleep(random.uniform(0.567,2))	#	—á—É—Ç–æ–∫ –∂–¥–µ–º
						bf_run = False
						if sndmsgs==0:
							info = 'ü§∑ –Ω–µ–º–∞'
						else:
							info = f'‚úÖ {sndmsgs}'
						try:
							await event.edit(info)
						except Exception as wtf:
							print(wtf) #print why?
						if os.name == 'nt':
							win32api.SetConsoleTitle(f'{my_id}')	# –∑–∞–≥–æ–ª–æ–≤–∫: –º—ñ–π_—ñ–¥.
						elif is_termux and termux_api:
							os.system(
							f"termux-toast -b black -c green '{my_id}, {info}'"
							)
						bf_run = False
						print(info)
						break
					print(f'üìÉ —î {count} –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏—Ö –ø–∞—Ü—ñ—î–Ω—Ç—ñ–≤. –ü—Ä–æ–±—É—î–º —Å–æ–∂—Ä–∞—Ç—å')
					e_info=get_some_patients(limit=int(random.randint(100,1000)))
					random.shuffle(e_info)	# –ø–µ—Ä–µ—Ç–∞—Å—É–≤–∞—Ç—å?
					for row in e_info:
						if ostalos_pt < 7:
							rs_min = 1000	# —è–∫—â–æ –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ —Ö–∞–π –ø—ñ–¥–∑–±–∏—Ä–∞—é—Ç—å—Å—è.
							rs_max = 3600	# if –í–ª–∞–¥ –∑–∞–±—Ä–∞–ª —É —Ç–µ–±—è 49 –ø–∞—Ç–æ–≥–µ–Ω–æ–≤...
							bf_mode='Slow'	# —Ç–µ–ø–µ—Ä —Ü–µ –ª–∏—à–µ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–æ–Ω—Å–æ–ª—ñ.
						if ostalos_pt > 6:
							rs_min = 11
							rs_max = 99
							bf_mode='Normal'
						if ostalos_pt > 60:
							bf_mode='Fast'
							rs_max = 33
						if ostalos_pt > 90:
							rs_min = 3.333
							rs_max = 9.999
							bf_mode='Turbo'
						if os.name == 'nt':
							win32api.SetConsoleTitle(f'{my_id}#{bf_mode}')
						if row[0] not in noeb and row[0]!=my_id:
							#	üë∫ –ù–µ–º–æ–∂–Ω–∞ –π–æ–±–Ω—É—Ç–∏ –±–æ—Ç–∞!
							#	‚ùå –ù–µ–ª—å–∑—è –∑–∞—Ä–∞–∑–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
							rs = float(random.uniform(rs_min,rs_max))# random
							eb = f'–ë–∏–æ–µ–± {row[0]}' # –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
							if ostalos_pt > 90 or bf_mode=='Turbo':#–æ–¥–Ω–µ —ñ —Ç–µ –∂.
								eb = f'–ë–∏–æ–µ–± 10 {row[0]}' # –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
							print(f'‚è≥ {eb} and wait {rs}')
							try:
								m=await event.reply(eb)
								sndmsgs+=1	# —Ä–∞—Ö—É—î–º–æ –∫-—Å—Ç—å (–Ω–∞–¥—ñ—Å–ª–∞–Ω–∏—Ö)
								await asyncio.sleep(random.uniform(2.0001, 3.3))
								await client.delete_messages(event.chat_id,m.id)
								await asyncio.sleep(rs)
							except Exception as wtf:
								print(wtf) #why?
					print(f'‚úÖ {sndmsgs}') # how
					optimize()
		
		####################################################################
		
		@client.on(events.NewMessage(outgoing=True, 
		pattern=r'.biofuck_(r|p|m|plus|minus|random)$'))
		async def cmd_bfrpm(event):	
			global ch_id, bf_mode, bf_run, ostalos_pt
			m = event.message
			text = m.raw_text
			if bf_run:
				pong='‚úÖ –≤–∂–µ –ø—Ä–∞—Ü—é—î...' # ok.
				await event.edit(pong) # —Ä–µ–¥.
			elif event.chat_id > 0:
				pong='–ê–ª–æ—É —Ü–µ –Ω–µ —á–∞—Ç!' #wtf?!
				await event.edit(pong) # —Ä–µ–¥.
			else:
				bf_run = True
				bioeb = '–ë–∏–æ–µ–±'# message
				if 'p' in text:# p,plus
					bioeb = '–ë–∏–æ–µ–± +'
				if 'm' in text:# m,minus
					bioeb = '–ë–∏–æ–µ–± -'
				pong = f'‚úÖ {bioeb}'
				await event.edit(pong) # —Ä–µ–¥.
				if ch_id != event.chat_id:
					ch_id = event.chat_id
					save_config_key('ch_id',ch_id)
				while bf_run:
					#	‚úÖ –ø–æ–≥–Ω–∞–ª–∏...
					if ostalos_pt < 7:
						rs_min = 1000	# —è–∫—â–æ –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ —Ö–∞–π –ø—ñ–¥–∑–±–∏—Ä–∞—é—Ç—å—Å—è.
						rs_max = 3600	# if –í–ª–∞–¥ –∑–∞–±—Ä–∞–ª —É —Ç–µ–±—è 49 –ø–∞—Ç–æ–≥–µ–Ω–æ–≤...
						bf_mode='Slow'	# —Ç–µ–ø–µ—Ä —Ü–µ –ª–∏—à–µ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–æ–Ω—Å–æ–ª—ñ.
					if ostalos_pt > 6:
						rs_min = 11
						rs_max = 99
						bf_mode='Normal'
					if ostalos_pt > 60:
						bf_mode='Fast'
						rs_max = 33
					if ostalos_pt > 90:
						rs_min = 3.333	# —Ü–µ –Ω–∏–∑—å–∫–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª, –∞–ª–µ —è–∫—â–æ –ø–∞—Ç—ñ–≤ –¥–æ—Ñ—ñ–≥–∞
						rs_max = 7.777	# —Ü–µ –Ω–∏–∑—å–∫–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª, –∞–ª–µ —è–∫—â–æ –ø–∞—Ç—ñ–≤ –¥–æ—Ñ—ñ–≥–∞
						bf_mode='Turbo'
					if os.name == 'nt':
						win32api.SetConsoleTitle(f'{my_id} {bf_mode}')
					rs = float(random.uniform(rs_min,rs_max))# random
					print(f'‚è≥ {bioeb} and wait {rs}')
					m=await client.send_message(ch_id,bioeb)# message
					await asyncio.sleep(random.uniform(2.0001, 3.3))
					await client.delete_messages(event.chat_id,m.id)
					await asyncio.sleep(rs)
		
		####################################################################
		
		@client.on(events.NewMessage(outgoing=True, 
		pattern=r'\.biofuck(_| )stop$'))
		async def stop_bioeb(event):
			global bf_run
			if bf_run:
				bf_run = False
				info = '‚èπ stop.'
			else:
				info = '–ù–µ –∑–∞–ø—É—â–µ–Ω–æ.'
			await event.edit(info)  # —Ä–µ–¥
		
		####################################################################
		
		@client.on(events.NewMessage(from_users=6333102398,
		pattern=r'.+(–ë—É–ª–∞|–ë—ã–ª–∞|–°–ø—Ä–æ–±–∞|(–ü|–ø)–æ–ø—ã—Ç(–æ)?–∫(–∞)?)'))
		# –ë—É–ª–∞|–ë—ã–ª–∞|–°–ø—Ä–æ–±–∞|–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–µ–±–∞—Ç—å|–æ–±–º–∞–Ω—É—Ç—å|...
		async def try_eb(event):
			m = event.message
			t = m.raw_text
			if m.entities:
				h= utils.sanitize_parse_mode('html').unparse(t,m.entities)
				p= re.findall(r'¬´(.+)¬ª',t)	#	–ø–∞—Ç–æ–≥–µ–Ω–æ–º
				r= re.findall(
				r'(–ê—Ñ–µ—Ä–∏—Å—Ç|–ó–ª–æ—á–∏–Ω–µ—Ü—å|–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä.*|–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.*|–ü–æ—Ä–Ω–æ–∞–∫—Ç–µ—Ä): <a href="tg://openmessage\?user_id=(\d+)">',h)
				if r:
					u_id=int(r[0][1])
					if u_id!=my_id:
						if p:
							p=str(p[0])
						if db_sqlite3:
							try:
								c.execute("INSERT INTO avocado(user_id) VALUES (?)", 
								(int(u_id))); conn.commit()	#	try save from try.
							except:
								# –ê–ª–µ —à–≤–∏–¥—à–µ –∑–∞ –≤—Å–µ —É –±–∞–∑—ñ –≤–∂–µ —î
								pass
						if db_pymysql:
							query=f"INSERT IGNORE `tg_bio_users`(`user_id`) VALUES ('{u_id}');"
							if p:
								try:
									d.execute('''INSERT INTO `tg_bio_users` 
									(`user_id`, `virus`) VALUES (%s,%s) 
									ON DUPLICATE KEY UPDATE virus=VALUES(virus)''', 
									(int(u_id),str(p))); con.commit()
								except Exception as Err:
									print(f'err: {Err} (tg_bio_users)')
							else:
								con.query(query)
		
		####################################################################
		
		@client.on(events.NewMessage(
		from_users=6333102398,
		pattern=r'–ë–æ–ª–µ–∑–Ω–∏ –∏–≥—Ä–æ–∫–∞'))
		async def infect_list(event):
			m = event.message
			t = m.raw_text
			if m.entities:
				if len(m.entities) > 1:
					w=int(datetime.timestamp(m.date))	#	when_int
					h=utils.sanitize_parse_mode('html').unparse(t,m.entities)
					r=re.findall(r'<a href="tg://openmessage\?user_id=([0-9]+)">(.+)</a> \|',h) # list of infect
					for v in r:
						u=int(v[0])
						p=str(v[1])
						if db_pymysql:
							query=f"INSERT IGNORE `tg_bio_users`(`user_id`) VALUES ('{u}');"
							if p!='–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ç–æ–≥–µ–Ω':
								try:
									d.execute('''INSERT INTO `tg_bio_users` 
									(`user_id`, `virus`) VALUES (%s,%s) 
									ON DUPLICATE KEY UPDATE virus=VALUES(virus)''', 
									(int(u),str(p))); con.commit()
								except Exception as Err:
									print(f'err: {Err} (tg_bio_users)')
							else:
								con.query(query)
						if db_sqlite3:
							try:
								c.execute("INSERT INTO avocado(user_id) VALUES (?)", 
								(int(u_id))); conn.commit()
							except:
								# –ê–ª–µ —à–≤–∏–¥—à–µ –∑–∞ –≤—Å–µ —É –±–∞–∑—ñ –≤–∂–µ —î
								pass
		
		####################################################################
		
		@client.on(events.NewMessage(
		from_users=6333102398,
		pattern=r'ü¶† –ñ–µ—Ä—Ç–≤—ã –∏–≥—Ä–æ–∫–∞'))
		async def victims_list(event):
			m = event.message
			t = m.raw_text
			if m.entities:
				w=int(datetime.timestamp(m.date))	#	when_int
				h=utils.sanitize_parse_mode('html').unparse(t,m.entities)
				u=int(re.findall(r'<strong>ü¶† –ñ–µ—Ä—Ç–≤—ã –∏–≥—Ä–æ–∫–∞ </strong><a href="tg://openmessage\?user_id=([0-9]+)">.+</a>',h)[0])
				r=re.findall(r'<a href="tg://openmessage\?user_id=([0-9]+)">.+</a> \| \+([0-9\ ]+) \| –¥–æ ([0-9\.]+)',h) # v,b,d
				for v in r:
					z=int(v[0])
					a=str(v[2]) # date '31.12.2024'
					b=int(re.sub(' ','',str(v[1])))
					d=int(datetime.timestamp(datetime.strptime(a,"%d.%m.%Y")))
					
					if db_sqlite3:
						if u==my_id:
							try:
								c.execute("INSERT OR REPLACE INTO avocado (user_id,when_int,bio_int,expr_int,expr_str) VALUES (?,?,?,?,?)",
								(int(z),int(w),int(b),int(d),str(a))); conn.commit()
							except Exception as Err:
								print(f'err: {Err} avocado')
						elif z!=my_id and z not in noeb:
							try:
								c.execute("INSERT INTO avocado(user_id,when_int,bio_int,expr_int) VALUES (?,?,?,?)", (int(z),int(w),int(b),int(0))); conn.commit()# save not my pacients
							except:
								try:
									c.execute("UPDATE avocado SET when_int = :wh, bio_int = :xpi WHERE user_id = :z AND expr_int < :wh;", {"wh":int(w),"xpi":int(b),"z":int(z)}); conn.commit()
								except Exception as Err:
									print(f'err: {Err} avocado upd not my')
									#pass

					if db_pymysql:
						
						try:
							query=f"INSERT INTO `tg_bio_attack` (`date`, `who_id`, `user_id`, `profit`, `until_int`, `until_str`) VALUES ('{w}', '{u}', '{z}', '{b}', '{d}', '{a}') ON DUPLICATE KEY UPDATE date=VALUES(date),profit=VALUES(profit),until_int=VALUES(until_int),until_str=VALUES(until_str);"; 
							con.query(query)
						except Exception as Err:
							print(f'err: {Err} (tg_bio_attack)')
							#pass
						try:
							con.query(f"INSERT INTO `tg_bio_users` (`user_id`, `profit`) VALUES ('{z}', '{b}') ON DUPLICATE KEY UPDATE profit=VALUES (profit);")
						except Exception as Err:
							print(f'err: {Err} (tg_bio_users)')
							#pass
					
					if u==my_id:
						print(f'üÜî {z} ‚ûï{b}') # –ø–æ–∫–∞–∑–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—ñ
				
				if db_sqlite3:
					optimize()
		
		####################################################################
		
		@client.on(events.NewMessage(
		from_users=6333102398,
		pattern=
		r'.+(–°–ª–µ—Ç–µ–≤—à–∏–µ –∏–≥—Ä–æ–∫–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏|–°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–ª–µ—Ç–µ–≤—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤)'))
		async def infect_list(event):
			m = event.message
			t = m.raw_text
			if m.entities:
				if len(m.entities) > 1:
					w=int(datetime.timestamp(m.date))	#	when_int
					h=utils.sanitize_parse_mode('html').unparse(t,m.entities)
					r=re.findall(r'<a href="tg://openmessage\?user_id=([0-9]+)">.+</a> \| ([0-9\ ]+)',h) # v,
					u=int(re.findall(r'¬´</strong><a href="tg://openmessage\?user_id=([0-9]+)">.+</a>',h)[0])
					count=0
					added=0
					mysql=0
					errrs=0
				for v in r:
					count+=1
					z=int(v[0])
					#b=int(re.sub(' ','',str(v[1]))) # —ñ–Ω—Ñ–∞ –≤–æ–±—â–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–∞
					if db_sqlite3 and z!=my_id and z not in noeb:
						try:
							c.execute("INSERT INTO avocado(user_id,when_int,bio_int,expr_int) VALUES (?,?,?,?)", (int(z),int(0),int(1),int(0))); conn.commit()# save pacients
							added+=1
						except:
							pass
				#rof
				info = ''
				if count > 0:
					info = f'count: {count}'
					if added > 0:
						info = f'{info}\added: {added}'
					print(info)
		
		####################################################################
		
		@client.on(events.NewMessage(pattern='‚è±?üö´ –ñ–µ—Ä—Ç–≤–∞'))
		async def infection_not_found(event):
			m = event.message
			if m.sender_id == 6333102398 and m.mentioned:
				if get_config_key("a_404_p"): # A_Click enabled?
					await asyncio.sleep(random.uniform(1.111,2.239))
					result = await client(functions.messages.GetBotCallbackAnswerRequest(
					# src https://tl.telethon.dev/methods/messages/get_bot_callback_answer.html
					peer=m.peer_id,
					msg_id=m.id,
					game=False,  # idk why it works only when it false... 0_o
					data=m.reply_markup.rows[0].buttons[0].data
					))
					print('trying eat patient')
					if result.message:
						print(f'avocado says: {result.message}')
		
		####################################################################
		
		@client.on(events.NewMessage(pattern='.+ –ó–ê–ë–†–ê–õ —É —Ç–µ–±—è'))
		async def –ó–ê–ë–†–ê–õ(event):
			m = event.message
			if m.sender_id ==6333102398:
				if m.mentioned or m.chat_id == 6333102398:
					r= re.findall(r'([0-9]{1,})',m.raw_text)
					if r:
						global ostalos_pt
						#print(m.raw_text)
						ostalos_pt-=int(r[0])
		
		####################################################################
		
		@client.on(events.NewMessage(pattern='.+ –ø–æ–¥–æ–≥–Ω–∞–ª —Ç–µ–±–µ'))
		async def –ø–æ–¥–æ–≥–Ω–∞–ª(event):
			m = event.message
			if m.sender_id ==6333102398:
				if m.mentioned or m.chat_id == 6333102398:
					r= re.findall(r'([0-9]{1,2})',m.raw_text)
					if r:
						global ostalos_pt
						#print(m.raw_text)
						ostalos_pt+=int(r[0])
		
		####################################################################
		
		@client.on(events.NewMessage(pattern='üå° –£ –≤–∞—Å –≥–æ—Ä—è—á–∫–∞ –≤—ã–∑–≤–∞–Ω–Ω–∞—è'))
		async def need_h(event):
			m = event.message
			if m.sender_id==6333102398: 
				if m.mentioned or m.chat_id == 6333102398:
					if get_config_key("a_h"): # —á–∏—Ç–∞—î–º–æ —ñ–∑ —Ñ–∞–π–ª–∞. 
						ah = await message_q(f"–•–∏–ª",6333102398,mark_read=True)
						print(ah.raw_text)
					else:
						global ostalos_pt
						ostalos_pt=1 # => 'Slow'. <= —Ç–æ–±—Ç–æ '–∫–æ—Å—Ç–∏–ª—å', –¥–∞.
		
		####################################################################
		
		@client.on(events.NewMessage(incoming=True,from_users=6333102398,
		pattern=r'(üë∫|üìõ) (–ß–µ–∫–∞–π –Ω–æ–≤–∏—Ö –ø–∞—Ç–æ–≥–µ–Ω—ñ–≤|–ñ–¥–∏ –Ω–æ–≤—ã—Ö –ø–∞—Ç–æ–≥–µ–Ω–æ–≤)!'))
		async def need_p(event):
			m = event.message
			if m.sender_id == 6333102398:
				if m.mentioned or m.chat_id == 6333102398:
					global bf_mode,ostalos_pt
					bf_mode = 'Slow'
					ostalos_pt=0
					optimize()
		
		####################################################################
		
		@client.on(events.NewMessage(
		incoming=True,from_users=6333102398,
		pattern='üëéüèªüíî –ù–µ—É–¥–∞—á–∞!'))
		async def –ù–µ—É–¥–∞—á–Ω–∞—è–ø–æ–ø—ã—Ç–∫–∞–º–∞–π–Ω–∏–Ω–≥–∞(event):
			c = event.chat_id
			m = event.message
			t = m.raw_text
			if m.chat_id == 6333102398:	# –∫—Ä—á –≤—ñ–¥ –Ω–µ—É–¥–∞—á–Ω–∏—Ö –±—É–¥–µ–º –ª–∏—à–µ –≤ –ª—Å –±–æ—Ç–∞
				r=re.findall(r'–°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ([0-9]{1,3}) –º–∏–Ω—É—Ç',t)
				mine=get_config_key("mine")
				if r and mine:
					print(t)
					if ch_id < 0:
						kuda = ch_id # —Å–ª–∞—Ç—å –≤ —á–∞—Ç
					else:
						kuda = 6333102398 # if!ch_id
					m = (int(r[0]) +1)*60	# +1 –º
					await asyncio.sleep(m)	# –∂–¥–µ–º
					await client.send_message(kuda,'–ú–∞–π–Ω')
		
		####################################################################
		
		@client.on(events.NewMessage(incoming=True,pattern=r'.+–£–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞.+'))
		async def mine_ok(event):
			c = event.chat_id
			m = event.message
			mine=get_config_key("mine")
			if m.sender_id == 6333102398 and (c == 6333102398 or (c == ch_id and m.mentioned)) and mine:
				#save_config_key('mine',int(datetime.timestamp(m.date)))	# when
				if ch_id < 0:
					kuda = ch_id # —Å–ª–∞—Ç—å –≤ —á–∞—Ç # –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —É–¥–∞–ª–æ—Å—å –≤ –ª—Å –±–æ—Ç–∞. 
					if get_config_key("farm"):
						rs=random.uniform(2.2,3.3)	# random
						await asyncio.sleep(rs)	# –∂–¥–µ–º rs —Å–µ–∫—É–Ω–¥
						await client.send_message(ch_id,'–§–µ—Ä–º–∞')
				else:
					kuda = 6333102398 # —è–∫—â–æ —á–∞—Ç –Ω–µ –∑–∞–¥–∞–Ω–æ
				print(m.text) # –ø–æ–∫–∞–∑–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—ñ —Ç–µ–∫—Å—Ç
				rs=random.uniform(7201,7222)	# random
				await asyncio.sleep(rs)	# –∂–¥–µ–º rs —Å–µ–∫—É–Ω–¥
				await client.send_message(kuda,'–ú–∞–π–Ω')
		
		####################################################################
		
		@client.on(events.NewMessage(pattern=r'‚úÖ (–í–î–ê–õ–û|–ó–ê–ß–Å–¢)'))
		async def —Ñ–µ—Ä–º–∞(event):
			m = event.message
			print(m.raw_text)
			if m.sender_id in irises:
				if ch_id < 0 and get_config_key("farm"):
					rs=random.uniform(3.53,5.11)	# random
					await asyncio.sleep(rs)	# –∂–¥–µ–º rs —Å–µ–∫—É–Ω–¥
					await client.send_message(ch_id,'''.—Ç–∞–π–º–µ—Ä 4 —á–∞—Å–∞\n.—Ñ–µ—Ä–º–∞''')
		
		####################################################################
		
		@client.on(events.NewMessage(outgoing=True, pattern=r'.reset$'))
		async def cmd_reset(event):
			# –æ–±–Ω—É–ª—è—î–º–æ –¥–∞—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ –ø—ñ—Å–ª—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—É)
			if db_sqlite3: # –ê –≤–æ–Ω–∞ —É –Ω–∞—Å –∑–∞–≤–∂–¥–∏ True
				try:
					c.execute("UPDATE avocado SET when_int = 0, expr_int = 0;"); conn.commit()
					c.execute('PRAGMA optimize'); conn.commit()
					c.execute('VACUUM'); conn.commit()
					await asyncio.sleep(1)
					try:
						await event.edit('–∂–º—è–∫ /backup —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ —É –±–∞–∑—ñ')	#	—Ä–µ–¥.
					except Exception as err:
						print(err) # –ø–æ–∫–∞–∑–∞—Ç—å
					await asyncio.sleep(1)
				except Exception as Err:
					print(f'err: {Err} in reset')
					await event.edit(Err)	#	—Ä–µ–¥.
		
		####################################################################
		
		@client.on(events.NewMessage(outgoing=True, pattern=r'.chts$'))
		async def sv_cheats(event):
			c = event.chat_id
			m = event.message
			t = m.raw_text
			global chts
			pong = '??'
			try:
				with open(chts_file, "r") as read_file:
					chts = json.load(read_file)
			except Exception as Err:
				print(Err)
			if int(c) > 0:
				pong='–ê–ª–æ—É —Ü–µ –Ω–µ —á–∞—Ç!' #wtf?!
				await event.edit(pong) # —Ä–µ–¥.
				print(pong)
				return
			if t=='+chts' or t=='-chts':
				need_save=False
				if '+' in t:
					if c not in chts:
						chts.append(c)
						need_save=True
					pong=f'‚úÖ sv_cheats 1\nüí¨<code>{c}</code>'
				if '-' in t:
					if c in chts:
						chts.remove(c)
						need_save=True
					pong=f'‚ùé sv_cheats 0\nüí¨<code>{c}</code>'
				if need_save:
					with open(chts_file, "w", encoding="utf-8") as write_file:
						json.dump(chts,write_file,ensure_ascii=False,indent='	')
			else:
				if c in chts:
					pong=f'‚úÖ sv_cheats 1\nüí¨<code>{c}</code>' # ok?!
				if c not in chts:
					pong=f'‚ùé sv_cheats 0\nüí¨<code>{c}</code>' # off!
			try:
				await event.edit(pong) # —Ä–µ–¥.
				print(pong)
			except Exception as wtf:
				print(wtf)	#	print
		
		####################################################################
		
		@client.on(events.NewMessage(pattern=r'\.—Ö(–∏–ª)?$'))
		async def cmd_—Ö(event):
			c = event.chat_id
			m = event.message
			s = m.sender_id
			global chts
			try:
				with open(chts_file, "r") as read_file:
					chts = json.load(read_file)
			except Exception as Err:
				print(Err)
				#return
			if c in chts:
				await asyncio.sleep(random.uniform(0.333,1))	# –∂–¥–µ–º
				h = await message_q(f"–•–∏–ª",6333102398,mark_read=True)
				t = h.raw_text
				r = re.findall(r'([0-9]+)',t)
				if r:
					t=re.sub(r,'||????||',t)
				if s == my_id:
					try:
						await event.edit(t) # —Ä–µ–¥.
					except Exception as wtf:
						print(wtf)	#	print
				else:
					try:
						m=await event.reply(t)
						await asyncio.sleep(random.uniform(2.2,3.3))
						await client.delete_messages(event.chat_id,m.id)
					except Exception as wtf:
						print(wtf) #why?

		####################################################################
		
		@client.on(events.NewMessage(outgoing=True, 
		pattern=r'.(h(e)?lp|—Ö(–µ)?–ª–ø)$'))
		async def cmd_help(event):
			help_message = f'''
			<blockquote>üìÉ –∫–æ–¥ —ñ —î –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è üòà</blockquote>
			
			<code>.ping</code> ‚Äì "pong!", del.
			<code>.biofuck</code> ‚Äì run '–±–∏–æ–µ–±'
			<code>.biofuck_r</code> ‚Äì run '–±–∏–æ–µ–±'
			<code>.biofuck_p</code> ‚Äì run '–±–∏–æ–µ–± +'
			<code>.biofuck_m</code> ‚Äì run '–±–∏–æ–µ–± -'
			<code>.reset</code> ‚Äì set dates as '0'
			<code>.help</code> ‚Äì <u>you are here</u>
			
			<code>https://github.com/S1S13AF7/ub4tg</code> ‚Äì <a 
			href="https://github.com/S1S13AF7/ub4tg">code</a>;
			
			üí¨ <u>@misc_games</u>
			üí¨ <u>@ub4tg</u>
			'''
			await asyncio.sleep(random.uniform(0.3,1))
			await event.edit(help_message) # —Ä–µ–¥.
		
		####################################################################
		
		@client.on(events.NewMessage(outgoing=True, pattern='.ping'))
		async def cmd_ping(event):
			# Say "pong!" whenever you send "!ping", then delete both messages
			m = await event.reply('pong!')
			await asyncio.sleep(5)
			await client.delete_messages(event.chat_id, [event.id, m.id])
		
		####################################################################
		
		await client.run_until_disconnected()
		
		####################################################################
		
asyncio.run(main())
