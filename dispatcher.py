# -*- coding: utf-8 -*-
# from misc_beta_bot
# "–¥–∏—Å–ø–µ—Ç—á–µ—Ä" —Ü–µ –∑–≤–∏—á–∞–π–Ω–∏–π –±–æ—Ç (–Ω–µ —é–±)
# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ "–¥–∏—Å–ø–µ—Ç—á–µ—Ä" —î —Å–µ–Ω—Å, —è–∫—â–æ: 
#
# > —É –≤–∞—Å —î –±–∞–∑–∞ MySQL –Ω–∞ http://localhost/
# > —É –≤–∞—Å –∫—ñ–ª—å–∫–∞ –∞–∫–∫—ñ–≤ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ 1 –±–¥
#
# —Å–ø—ñ–ª—å–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –æ–¥–Ω—ñ—î—ó –±–¥ sqlite –∫—ñ–ª—å–∫–æ–º–∞ –±–æ—Ç–∞–º–∏ —Å—Ç–≤–æ—Ä—é—î –ø—Ä–æ–±–ª–µ–º—É db is locked
# —Ç–æ–º—É —É –≤–∏–ø–∞–¥–∫—É –∑ –∫—ñ–ª—å–∫–æ–º–∞ —é–∑–µ—Ä–∞–º–∏ —É –∫–æ–∂–Ω–æ–≥–æ —Å–≤–æ—è sqlite –±–∞–∑–∞ {id}.slite
# –∞ –æ—Ç MySQL –≤ —Å–≤–æ—é —á–µ—Ä–≥—É –º–æ–∂–µ –±—É—Ç–∏ —Å–ø—ñ–ª—å–Ω–∞ –¥–ª—è –≤—Å—ñ—Ö –±–æ—Ç—ñ–≤ —ñ —é–∑–µ—Ä–±–æ—Ç—ñ–≤.
# —Ç–æ–±—Ç–æ —è–∫—â–æ —é–∑–∞—î—Ç–µ –ª–∏—à–µ sqlite —Ç–æ —ñ "–¥–∏—Å–ø–µ—Ç—á–µ—Ä" –≤–∞–º –Ω–∞—Ñ—ñ–≥ –Ω–µ—Ç—Ä–µ–±–∞.
from datetime import datetime, timedelta

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor

from config import TOKEN

import os
import re
import random
import time

import pymysql
import pymysql.cursors

import sqlite3

db_pymysql = True#set True
db_sqlite3 = False#set False

if db_pymysql:
	ldb=pymysql.connect(
	host='localhost',
	user='root',
	password='–Ω–∞–ø–∏—à—ñ—Ç—å_—Å—é–¥–∞_–≤–∞—à_–ø–∞—Ä–æ–ª—å_–≤—ñ–¥_–ª–æ–∫–∞–ª—å–Ω–æ—ó_–±–¥',
	db='db',
	charset='utf8mb4',
	cursorclass=pymysql.cursors.DictCursor)
	dbc = ldb.cursor()
	dbc.execute('''CREATE TABLE IF NOT EXISTS `tg_iris_zarazy` (
	`when_int` int(11) unsigned NOT NULL DEFAULT '0',
	`who_id` bigint(20) unsigned NOT NULL DEFAULT '0',
	`user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
	`u_link` varchar(500) NOT NULL DEFAULT '',
	`bio_str` varchar(11) NOT NULL DEFAULT '1',
	`bio_int` int(11) unsigned NOT NULL DEFAULT '1',
	`expr_int` int(11) unsigned NOT NULL DEFAULT '0',
	`expr_str` varchar(11) NOT NULL DEFAULT '0',
	UNIQUE KEY `UNIQUE` (`who_id`,`user_id`)
	);''');
	#–∑–±–µ—Ä—ñ–≥–∞–ª–∫–∞: https://github.com/S1S13AF7/ub4tg
	ldb.commit()

bot = Bot(token=TOKEN, parse_mode=types.ParseMode.HTML) #see: https://mastergroosha.github.io/aiogram-2-guide/messages/
dp = Dispatcher(bot)   

print('Bot started') 

@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
	#print(message)
	snd_msg = "üññ"
	await message.answer(snd_msg)


@dp.message_handler(commands=['mz','–º–∂','–º–∑'])
async def cmd_myzh (message: types.Message):
	msg="ü§∑"
	user_id = int(message.from_user.id)
	user_fn = message.from_user.first_name or ''
	lng_code = message.from_user.language_code or ''
	when_int = int(datetime.timestamp(message.date))
	if db_pymysql:
		try:
			#–∑–±–µ—Ä—ñ–≥–∞–ª–∫–∞: https://github.com/S1S13AF7/ub4tg (–∞–¥—Ä–µ—Å–∞ –º–æ–∂–µ –∑–º—ñ–Ω–∏—Ç–∏—Å—å)
			dbc.execute("SELECT user_id,bio_str,expr_str FROM `tg_iris_zarazy` WHERE who_id = %d ORDER BY when_int DESC LIMIT 10;" % int(user_id));
			bz_info = dbc.fetchmany(10)#–ø–æ–ª—É—á–∏—Ç—å
			all_sicknes=[]#—ñ–Ω—Ñ–∞
			count=len(bz_info)
			who=f"ü¶† {user_fn}:"
			for row in bz_info:
				print(row)
				id_user=row["user_id"]
				bio_str=row["bio_str"]
				u_link =f'tg://openmessage?user_id={id_user}'	#fix –¥–ª—è –ª—é–±–∏—Ç–µ–ª—ñ–≤ –º—ñ–Ω—è—Ç—å –π–æ–≥–æ
				expr_str=re.sub(r'.20', r'.',row["expr_str"]) #.2024->.24
				a_href = f'<a href="{u_link}"><code>@{id_user}</code></a>'
				all_sicknes.append(f"‚ûï{bio_str}	{a_href}#{expr_str}\n")
			if len(all_sicknes)!=0:
				all_sicknes=f'{who}\n{"".join(all_sicknes)}'
			else:
				all_sicknes='ü§∑ —ñ–Ω—Ñ–∞ –Ω–µ–º–∞.'
			msg=all_sicknes
		except Exception as Err:
			msg = Err
			print(f"localhost SELECT:{Err}")
	await message.answer(msg, parse_mode=types.ParseMode.HTML)

@dp.message_handler(commands=['ends'])
async def cmd_ends (message: types.Message):
	msg="ü§∑"
	user_id = int(message.from_user.id)
	user_fn = message.from_user.first_name or ''
	lng_code = message.from_user.language_code or ''
	when_int = int(datetime.timestamp(message.date))
	if db_pymysql:
		try:
			#–∑–±–µ—Ä—ñ–≥–∞–ª–∫–∞: https://github.com/S1S13AF7/ub4tg (–∞–¥—Ä–µ—Å–∞ –º–æ–∂–µ –∑–º—ñ–Ω–∏—Ç–∏—Å—å)
			dbc.execute(f"SELECT user_id,bio_str,expr_str FROM `tg_iris_zarazy` WHERE who_id = {user_id} AND expr_int < {when_int} ORDER BY `bio_int` DESC, `when_int` DESC LIMIT 10;")
			bz_info = dbc.fetchmany(10)#–ø–æ–ª—É—á–∏—Ç—å
			all_sicknes=[]#—ñ–Ω—Ñ–∞
			count=len(bz_info)
			who=f"ü¶† {user_fn}:"
			for row in bz_info:
				print(row)
				id_user=row["user_id"]
				bio_str=row["bio_str"]
				u_link =f'tg://openmessage?user_id={id_user}'	#fix –¥–ª—è –ª—é–±–∏—Ç–µ–ª—ñ–≤ –º—ñ–Ω—è—Ç—å –π–æ–≥–æ
				expr_str=re.sub(r'.20', r'.',row["expr_str"]) #.2024->.24
				a_href = f'<a href="{u_link}"><code>@{id_user}</code></a>'
				all_sicknes.append(f"‚ûï{bio_str} {a_href}#{expr_str}\n")
			if len(all_sicknes)!=0:
				all_sicknes=f'{who}\n{"".join(all_sicknes)}'
			else:
				all_sicknes='ü§∑ —ñ–Ω—Ñ–∞ –Ω–µ–º–∞.'
			msg=all_sicknes
		except Exception as Err:
			msg = Err
			print(f"localhost SELECT:{Err}")
	await message.answer(msg, parse_mode=types.ParseMode.HTML)

@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
	#await message.answer(emoji="ü§∑")
	await message.answer('''
‚Ä¢	ü¶† /mz
''')

@dp.message_handler(commands=['ping'])
async def process_ping_command(message: types.Message):
	await message.reply("PONG!")

@dp.message_handler(commands=['dice','–∫—É–±–∏–∫'])
async def cmd_dice(message: types.Message):
	await message.answer_dice(emoji="üé≤")

@dp.message_handler(commands=['code','–∫–æ–¥'])
async def cmd_code(message: types.Message):
	text='''
<code>https://github.com/S1S13AF7/ub4tg</code> ‚Äì —é–±. –ó–±–µ—Ä—ñ–≥–∞–ª–∫–∞ —Ö—Ç–æ –∫–æ–≥–æ –∑–∞—Ä–∞–∑–∏–≤
	'''
	await message.answer(text,parse_mode=types.ParseMode.HTML)

if __name__ == '__main__':
	executor.start_polling(dp)
